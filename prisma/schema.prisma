generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum ROLE {
    ADMIN
    USER
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          ROLE?     @default(USER)
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Blog {
    id          String      @id @default(cuid())
    title       String
    slug        String      @unique
    content     String      @db.Text
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    isDraft     Boolean?    @default(true)
    description String?     @db.Text
    Tags        Tag[]
    BlogVisits  BlogVisit[]
}

model Tag {
    id        String   @id @default(cuid())
    title     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Blogs     Blog[]
}

model Note {
    id        String   @id @default(cuid())
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BlogVisit {
    id        String   @id @default(cuid())
    blogId    String
    ip        String
    hash      String // ip address + random cookie
    Blogs     Blog     @relation(fields: [blogId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([blogId])
}

model BlogToTag {
    A String
    B String

    @@unique([A, B], map: "_BlogToTag_AB_unique")
    @@index([B], map: "_BlogToTag_B_index")
    @@map("_BlogToTag")
}
